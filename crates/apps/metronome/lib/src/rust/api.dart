// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'internal/processor.dart';
import 'internal/state.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

Future<int> initialize({required InitializeOptions options}) =>
    RustLib.instance.api.crateApiInitialize(options: options);

Future<int> deinitialize() => RustLib.instance.api.crateApiDeinitialize();

Future<int> setIsPlaying({required bool value}) =>
    RustLib.instance.api.crateApiSetIsPlaying(value: value);

Future<int> setTempo({required double value}) =>
    RustLib.instance.api.crateApiSetTempo(value: value);

Future<int> setVolume({required double value}) =>
    RustLib.instance.api.crateApiSetVolume(value: value);

Future<int> setBeatsPerBar({required int value}) =>
    RustLib.instance.api.crateApiSetBeatsPerBar(value: value);

Future<int> setSound({required MetronomeSoundTypeTag value}) =>
    RustLib.instance.api.crateApiSetSound(value: value);

Future<double> getPlayhead() => RustLib.instance.api.crateApiGetPlayhead();

Stream<EngineError> streamErrors() =>
    RustLib.instance.api.crateApiStreamErrors();

class EngineError {
  final String message;

  const EngineError({
    required this.message,
  });

  @override
  int get hashCode => message.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EngineError &&
          runtimeType == other.runtimeType &&
          message == other.message;
}
