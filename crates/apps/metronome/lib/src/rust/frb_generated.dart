// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:metronome/src/rust/api.dart';
import 'package:metronome/src/rust/frb_generated.dart';
import 'package:metronome/src/rust/frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:metronome/src/rust/internal/processor.dart';
import 'package:metronome/src/rust/internal/state.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -9471178;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_metronome',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<int> crateApiDeinitialize();

  Future<double> crateApiGetPlayhead();

  Future<int> crateApiInitialize({required InitializeOptions options});

  Future<int> crateApiSetBeatsPerBar({required int value});

  Future<int> crateApiSetIsPlaying({required bool value});

  Future<int> crateApiSetSound({required MetronomeSoundTypeTag value});

  Future<int> crateApiSetTempo({required double value});

  Future<int> crateApiSetVolume({required double value});

  Stream<EngineError> crateApiStreamErrors();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<int> crateApiDeinitialize() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiDeinitializeConstMeta,
      argValues: [],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiDeinitializeConstMeta => const TaskConstMeta(
        debugName: "deinitialize",
        argNames: [],
      );

  @override
  Future<double> crateApiGetPlayhead() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiGetPlayheadConstMeta,
      argValues: [],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiGetPlayheadConstMeta => const TaskConstMeta(
        debugName: "get_playhead",
        argNames: [],
      );

  @override
  Future<int> crateApiInitialize({required InitializeOptions options}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_initialize_options(options, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiInitializeConstMeta,
      argValues: [options],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiInitializeConstMeta => const TaskConstMeta(
        debugName: "initialize",
        argNames: ["options"],
      );

  @override
  Future<int> crateApiSetBeatsPerBar({required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSetBeatsPerBarConstMeta,
      argValues: [value],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiSetBeatsPerBarConstMeta => const TaskConstMeta(
        debugName: "set_beats_per_bar",
        argNames: ["value"],
      );

  @override
  Future<int> crateApiSetIsPlaying({required bool value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSetIsPlayingConstMeta,
      argValues: [value],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiSetIsPlayingConstMeta => const TaskConstMeta(
        debugName: "set_is_playing",
        argNames: ["value"],
      );

  @override
  Future<int> crateApiSetSound({required MetronomeSoundTypeTag value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_metronome_sound_type_tag(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSetSoundConstMeta,
      argValues: [value],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiSetSoundConstMeta => const TaskConstMeta(
        debugName: "set_sound",
        argNames: ["value"],
      );

  @override
  Future<int> crateApiSetTempo({required double value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSetTempoConstMeta,
      argValues: [value],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiSetTempoConstMeta => const TaskConstMeta(
        debugName: "set_tempo",
        argNames: ["value"],
      );

  @override
  Future<int> crateApiSetVolume({required double value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSetVolumeConstMeta,
      argValues: [value],
      apiImpl: this,
    ),);
  }

  TaskConstMeta get kCrateApiSetVolumeConstMeta => const TaskConstMeta(
        debugName: "set_volume",
        argNames: ["value"],
      );

  @override
  Stream<EngineError> crateApiStreamErrors() {
    final stream = RustStreamSink<EngineError>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_engine_error_Sse(stream, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_,);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiStreamErrorsConstMeta,
      argValues: [stream],
      apiImpl: this,
    ),),);
    return stream.stream;
  }

  TaskConstMeta get kCrateApiStreamErrorsConstMeta => const TaskConstMeta(
        debugName: "stream_errors",
        argNames: ["stream"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<EngineError> dco_decode_StreamSink_engine_error_Sse(
      dynamic raw,) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  InitializeOptions dco_decode_box_autoadd_initialize_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_initialize_options(raw);
  }

  @protected
  EngineError dco_decode_engine_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return EngineError(
      message: dco_decode_String(arr[0]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  InitializeOptions dco_decode_initialize_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return InitializeOptions(
      assetsFilePath: dco_decode_opt_String(arr[0]),
    );
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MetronomeSoundTypeTag dco_decode_metronome_sound_type_tag(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MetronomeSoundTypeTag.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<EngineError> sse_decode_StreamSink_engine_error_Sse(
      SseDeserializer deserializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  InitializeOptions sse_decode_box_autoadd_initialize_options(
      SseDeserializer deserializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return sse_decode_initialize_options(deserializer);
  }

  @protected
  EngineError sse_decode_engine_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_message = sse_decode_String(deserializer);
    return EngineError(message: var_message);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  InitializeOptions sse_decode_initialize_options(
      SseDeserializer deserializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_assetsFilePath = sse_decode_opt_String(deserializer);
    return InitializeOptions(assetsFilePath: var_assetsFilePath);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MetronomeSoundTypeTag sse_decode_metronome_sound_type_tag(
      SseDeserializer deserializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return MetronomeSoundTypeTag.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return sse_decode_String(deserializer);
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_engine_error_Sse(
      RustStreamSink<EngineError> self, SseSerializer serializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_engine_error,
          decodeErrorData: sse_decode_AnyhowException,
        ),),
        serializer,);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_initialize_options(
      InitializeOptions self, SseSerializer serializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_initialize_options(self, serializer);
  }

  @protected
  void sse_encode_engine_error(EngineError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_initialize_options(
      InitializeOptions self, SseSerializer serializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.assetsFilePath, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_metronome_sound_type_tag(
      MetronomeSoundTypeTag self, SseSerializer serializer,) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
