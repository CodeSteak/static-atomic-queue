// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `init_logger`
// These functions are ignored because they have generic arguments: `with_state`
// These types are ignored because they are not used by any `pub` functions: `STATE`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `fmt`, `initialize`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `with_state0`

Future<void> initialize({required InitializeOptions options}) =>
    RustLib.instance.api.crateApiStateInitialize(options: options);

Future<void> deinitialize() => RustLib.instance.api.crateApiStateDeinitialize();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<State>>
abstract class State implements RustOpaqueInterface {
  ProducerAppAudioThreadMessage get appProcessorMessages;

  StandaloneHandles get handles;

  SharedMetronomeProcessorHandle get processorHandle;

  set appProcessorMessages(ProducerAppAudioThreadMessage appProcessorMessages);

  set handles(StandaloneHandles handles);

  set processorHandle(SharedMetronomeProcessorHandle processorHandle);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<State> newInstance({required InitializeOptions options}) =>
      RustLib.instance.api.crateApiStateStateNew(options: options);
}

class InitializeOptions {
  final String? assetsFilePath;

  const InitializeOptions({
    this.assetsFilePath,
  });

  static Future<InitializeOptions> default_() =>
      RustLib.instance.api.crateApiStateInitializeOptionsDefault();

  @override
  int get hashCode => assetsFilePath.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is InitializeOptions &&
          runtimeType == other.runtimeType &&
          assetsFilePath == other.assetsFilePath;
}
