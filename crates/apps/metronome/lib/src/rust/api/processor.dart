// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `drain_message_queue`, `load_sounds`, `set_metronome_sound`
// These types are ignored because they are not used by any `pub` functions: `LoadedSound`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `eq`, `fmt`, `hash`, `prepare`, `process`

Future<(ProducerAppAudioThreadMessage, AppAudioProcessor)> buildAppProcessor(
        {required BuildAppProcessorOptions options}) =>
    RustLib.instance.api.crateApiProcessorBuildAppProcessor(options: options);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AppAudioProcessor>>
abstract class AppAudioProcessor implements RustOpaqueInterface {
  Future<void> metronomeHandle();
}

class BuildAppProcessorOptions {
  final String? assetsFilePath;

  const BuildAppProcessorOptions({
    this.assetsFilePath,
  });

  @override
  int get hashCode => assetsFilePath.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BuildAppProcessorOptions &&
          runtimeType == other.runtimeType &&
          assetsFilePath == other.assetsFilePath;
}

enum MetronomeSoundTypeTag {
  sine,
  tube,
  glass,
  snap,
  ;
}
