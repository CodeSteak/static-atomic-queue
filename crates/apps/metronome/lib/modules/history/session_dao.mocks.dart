// Mocks generated by Mockito 5.3.2 from annotations
// in metronome/modules/history/session_dao.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:metronome/modules/history/session_dao.dart' as _i2;
import 'package:metronome/modules/history/session_entity.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SessionDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionDao extends _i1.Mock implements _i2.SessionDao {
  @override
  _i3.Future<List<_i4.Session>> findAllSessions() => (super.noSuchMethod(
        Invocation.method(
          #findAllSessions,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Session>>.value(<_i4.Session>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Session>>.value(<_i4.Session>[]),
      ) as _i3.Future<List<_i4.Session>>);
  @override
  _i3.Future<List<_i4.AggregatedSession>> findAggregatedSessions() =>
      (super.noSuchMethod(
        Invocation.method(
          #findAggregatedSessions,
          [],
        ),
        returnValue: _i3.Future<List<_i4.AggregatedSession>>.value(
            <_i4.AggregatedSession>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.AggregatedSession>>.value(
                <_i4.AggregatedSession>[]),
      ) as _i3.Future<List<_i4.AggregatedSession>>);
  @override
  _i3.Future<List<_i4.DailyPracticeTime>> findDailyPracticeTime(int? startMs) =>
      (super.noSuchMethod(
        Invocation.method(
          #findDailyPracticeTime,
          [startMs],
        ),
        returnValue: _i3.Future<List<_i4.DailyPracticeTime>>.value(
            <_i4.DailyPracticeTime>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.DailyPracticeTime>>.value(
                <_i4.DailyPracticeTime>[]),
      ) as _i3.Future<List<_i4.DailyPracticeTime>>);
  @override
  _i3.Future<void> updateSession(_i4.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #updateSession,
          [session],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<int> insertSession(_i4.Session? session) => (super.noSuchMethod(
        Invocation.method(
          #insertSession,
          [session],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
