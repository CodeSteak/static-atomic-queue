// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

abstract class Metronome {
  Future<int> initialize({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializeConstMeta;

  Future<int> deinitialize({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDeinitializeConstMeta;

  Future<int> setIsPlaying({required bool value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetIsPlayingConstMeta;

  Future<int> setTempo({required double value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetTempoConstMeta;

  Future<int> setVolume({required double value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetVolumeConstMeta;

  Future<int> setBeatsPerBar({required int value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetBeatsPerBarConstMeta;

  Future<int> setSound({required MetronomeSoundTypeTag value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetSoundConstMeta;

  Stream<double> getPlayhead({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetPlayheadConstMeta;
}

enum MetronomeSoundTypeTag {
  Sine,
  Tube,
  Glass,
  Snap,
}

class MetronomeImpl implements Metronome {
  final MetronomePlatform _platform;
  factory MetronomeImpl(ExternalLibrary dylib) =>
      MetronomeImpl.raw(MetronomePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory MetronomeImpl.wasm(FutureOr<WasmModule> module) =>
      MetronomeImpl(module as ExternalLibrary);
  MetronomeImpl.raw(this._platform);
  Future<int> initialize({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_initialize(port_),
      parseSuccessData: _wire2api_i32,
      constMeta: kInitializeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "initialize",
        argNames: [],
      );

  Future<int> deinitialize({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_deinitialize(port_),
      parseSuccessData: _wire2api_i32,
      constMeta: kDeinitializeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeinitializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "deinitialize",
        argNames: [],
      );

  Future<int> setIsPlaying({required bool value, dynamic hint}) {
    var arg0 = value;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_is_playing(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kSetIsPlayingConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetIsPlayingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_is_playing",
        argNames: ["value"],
      );

  Future<int> setTempo({required double value, dynamic hint}) {
    var arg0 = api2wire_f32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_tempo(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kSetTempoConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetTempoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_tempo",
        argNames: ["value"],
      );

  Future<int> setVolume({required double value, dynamic hint}) {
    var arg0 = api2wire_f32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_volume(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kSetVolumeConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetVolumeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_volume",
        argNames: ["value"],
      );

  Future<int> setBeatsPerBar({required int value, dynamic hint}) {
    var arg0 = api2wire_i32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_beats_per_bar(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kSetBeatsPerBarConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetBeatsPerBarConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_beats_per_bar",
        argNames: ["value"],
      );

  Future<int> setSound({required MetronomeSoundTypeTag value, dynamic hint}) {
    var arg0 = api2wire_metronome_sound_type_tag(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_sound(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kSetSoundConstMeta,
      argValues: [value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetSoundConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_sound",
        argNames: ["value"],
      );

  Stream<double> getPlayhead({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_playhead(port_),
      parseSuccessData: _wire2api_f32,
      constMeta: kGetPlayheadConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetPlayheadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_playhead",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_metronome_sound_type_tag(MetronomeSoundTypeTag raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer

class MetronomePlatform extends FlutterRustBridgeBase<MetronomeWire> {
  MetronomePlatform(ffi.DynamicLibrary dylib) : super(MetronomeWire(dylib));

// Section: api2wire

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MetronomeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MetronomeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MetronomeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(uintptr_t)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_initialize(
    int port_,
  ) {
    return _wire_initialize(
      port_,
    );
  }

  late final _wire_initializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_initialize');
  late final _wire_initialize =
      _wire_initializePtr.asFunction<void Function(int)>();

  void wire_deinitialize(
    int port_,
  ) {
    return _wire_deinitialize(
      port_,
    );
  }

  late final _wire_deinitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_deinitialize');
  late final _wire_deinitialize =
      _wire_deinitializePtr.asFunction<void Function(int)>();

  void wire_set_is_playing(
    int port_,
    bool value,
  ) {
    return _wire_set_is_playing(
      port_,
      value,
    );
  }

  late final _wire_set_is_playingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_set_is_playing');
  late final _wire_set_is_playing =
      _wire_set_is_playingPtr.asFunction<void Function(int, bool)>();

  void wire_set_tempo(
    int port_,
    double value,
  ) {
    return _wire_set_tempo(
      port_,
      value,
    );
  }

  late final _wire_set_tempoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_set_tempo');
  late final _wire_set_tempo =
      _wire_set_tempoPtr.asFunction<void Function(int, double)>();

  void wire_set_volume(
    int port_,
    double value,
  ) {
    return _wire_set_volume(
      port_,
      value,
    );
  }

  late final _wire_set_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_set_volume');
  late final _wire_set_volume =
      _wire_set_volumePtr.asFunction<void Function(int, double)>();

  void wire_set_beats_per_bar(
    int port_,
    int value,
  ) {
    return _wire_set_beats_per_bar(
      port_,
      value,
    );
  }

  late final _wire_set_beats_per_barPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_set_beats_per_bar');
  late final _wire_set_beats_per_bar =
      _wire_set_beats_per_barPtr.asFunction<void Function(int, int)>();

  void wire_set_sound(
    int port_,
    int value,
  ) {
    return _wire_set_sound(
      port_,
      value,
    );
  }

  late final _wire_set_soundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_set_sound');
  late final _wire_set_sound =
      _wire_set_soundPtr.asFunction<void Function(int, int)>();

  void wire_get_playhead(
    int port_,
  ) {
    return _wire_get_playhead(
      port_,
    );
  }

  late final _wire_get_playheadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_playhead');
  late final _wire_get_playhead =
      _wire_get_playheadPtr.asFunction<void Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
typedef uintptr_t = ffi.UnsignedLong;
