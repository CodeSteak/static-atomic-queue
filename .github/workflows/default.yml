name: macOS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-rust:
    name: Rust - Run unit-tests on rust crates ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true
      - uses: Swatinem/rust-cache@v1
      - name: Install uniffi bindgen
        run: |
          if ! [ -x "$(command -v uniffi-bindgen)" ]; then
            cargo install --force --version 0.15.2 uniffi_bindgen
          fi
      - name: Run tests
        run: cargo test --verbose --workspace --features story --exclude augmented-ui --exclude midir
  lint-rust:
    name: Rust - Lint rust crates ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v1
      - name: Run clippy
        run: ./scripts/clippy.sh
  build-rust:
    name: Rust - Build release rust crates ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: true
    - uses: Swatinem/rust-cache@v1
    - name: Install uniffi bindgen
      run: cargo install --force --version 0.15.2 uniffi_bindgen
    - name: Build release
      run: cargo build --release --verbose --workspace --exclude augmented-ui --exclude midir
    - name: Upload plugin-host binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-plugin-host
        path: ./target/release/plugin-host
    - name: Upload plugin-host-gui2 binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-plugin-host-gui2
        path: ./target/release/plugin-host-gui2
    - name: Upload tremolo-plugin dylib
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-libtas_v2-dylib
        path: ./target/release/libtas_v2.dylib
  run-snapshot-tests:
    name: Run snapshot tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: true
    - uses: Swatinem/rust-cache@v1
    - name: Run snapshot tests
      run: |
        ./scripts/dev.sh test-snapshots
    - name: Upload snapshot test results
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-snapshot-tests
        path: ./test
      if: ${{ failure() }}
  build-looper-shared-libraries:
    name: Build looper C library
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true
      - uses: Swatinem/rust-cache@v1
      - name: Install cargo-lipo
        run: |
          cargo install cargo-lipo
      - name: Install ARM/x86 toolchains
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-ios-sim
          rustup target add aarch64-apple-ios
      - name: Build looper universal libraries
        run: |
          cd ./crates/apps/looper/looper-processor
          make
      - name: Upload target
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-looper-release
          path: ./target/**/liblooper_processor.*
          retention-days: 1
      - name: Upload headers & universal libs
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-looper-public
          path: ./crates/apps/looper/looper-processor/public
          retention-days: 1
  build-sequencer-macos:
    name: Run Sequencer macOS app tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    needs:
      - build-looper-shared-libraries
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true
      - uses: actions/cache@v2
        name: "Cache: Swift Package Manager"
        with:
          path: ~/Library/Developer/Xcode/DerivedData/Sequencer-*/SourcePackages/
          key: ${{ runner.os }}-spm
          restore-keys: |
            ${{ runner.os }}-spm
      - name: Download target dir
        uses: actions/download-artifact@v3
        with:
          name: ${{ runner.os}}-looper-release
      - name: Download looper libraries
        uses: actions/download-artifact@v3
        with:
          name: ${{ runner.os}}-looper-public
      - name: Run Sequencer.app tests
        run: |
          cd ./crates/apps/looper/Sequencer
          brew install xcbeautify
          make test