name: Default

on:
  push:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-javascript:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: restore lerna
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install lerna
        run: npm install
      - name: Bootstrap packages
        run: ./node_modules/.bin/lerna bootstrap --hoist
      - name: Run tests
        run: npm run test
      - name: Run builds
        run: npm run build
      - name: Upload tremolo-plugin-frontend build
        uses: actions/upload-artifact@v2
        with:
          name: tremolo-plugin-frontend
          path: ./packages/tremolo-plugin-frontend/build
      - name: Upload plugin-host-gui build
        uses: actions/upload-artifact@v2
        with:
          name: plugin-host-gui-frontend
          path: ./crates/plugin-host-gui/build

  build-rust:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get install -y \
            libasound2-dev \
            libssl-dev \
            cmake \
            libfreetype6-dev \
            expat \
            libexpat1-dev \
            libglib2.0-dev \
            libcairo-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libsoup2.4-dev \
            libclang-11-dev \
            libgdk3.0-cil-dev \
            libappindicator3-dev \
            libgtksourceview-3.0-dev \
            libwebkit2gtk-4.0-dev \
            libx11-xcb-dev \
            libxcb-icccm4-dev \
            libxcb-dri2-0-dev \
            nvidia-utils-465 \
            libgtk-3-dev
      if: matrix.os == 'ubuntu-latest'
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Run tests
      run: cargo test --verbose --workspace --exclude plugin-host-gui
      if: matrix.os == 'macos-latest'
    - name: Run clippy
      run: cargo clippy --verbose --workspace --exclude plugin-host-gui
      if: matrix.os == 'macos-latest'
    - name: Run check
      run: cargo check --verbose --workspace --exclude plugin-host-gui
      if: matrix.os == 'macos-latest'
    - name: Build
      run: cargo build --release --verbose --workspace --exclude plugin-host-gui
      if: matrix.os == 'macos-latest'
    - name: Non-OSX test
      run: |
        cargo test --no-default-features --verbose --workspace \
            --exclude plugin-host-gui \
            --exclude darwin-webkit \
            --exclude webview-holder \
            --exclude macos-bundle-resources
    - name: Non-OSX build
      run: |
        cargo build --release --verbose --workspace \
            --exclude plugin-host-gui \
            --exclude darwin-webkit \
            --exclude macos-bundle-resources
      if: matrix.os != 'macos-latest'
    - name: Upload plugin-host binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-plugin-host
        path: ./target/release/plugin-host
    - name: Upload tremolo-plugin dylib
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-libtas_v2-dylib
        path: ./target/release/libtas_v2.dylib

  build-plugin-host-gui:
    runs-on: ${{ matrix.os }}
    needs:
      - build-javascript
      - build-rust
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Download plugin-host-gui front-end build
        uses: actions/download-artifact@v2
        with:
          name: plugin-host-gui-frontend
          path: ./crates/plugin-host-gui/build
      - name: Test
        run: cargo test --no-default-features --verbose --workspace --package plugin-host-gui
      - name: Clippy
        run: cargo clippy --verbose --workspace --package plugin-host-gui
      - name: Build release
        run: cargo build --release --verbose --workspace --package plugin-host-gui
      - name: Upload plugin-host-gui binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-plugin-host-gui
          path: ./target/release/plugin-host-gui

#  # Disabled due to unreliability
#  build-with-coverage:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [macos-latest]
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#      - uses: actions/cache@v2
#        with:
#          path: |
#            ~/.cargo/bin/
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#            target/
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#      - name: Install nightly
#        run: rustup install nightly
#      - name: Install grcov
#        run: cargo +nightly install --force grcov
#      - name: Install llvm-tools
#        run: rustup component add llvm-tools
#      - name: Download plugin-host-gui front-end build
#        uses: actions/download-artifact@v2
#        with:
#          name: plugin-host-gui-frontend
#          path: ./crates/plugin-host-gui/build
#      - name: Build and test with coverage
#        run: ./scripts/build-rust-coverage-report.sh
#      - name: Upload coverage to coveralls
#        env:
#          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
#        run: |
#          grcov . --binary-path ./target/debug --source-dir . -t coveralls --token $COVERALLS_TOKEN
#      - name: Upload coverage report
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ runner.os }}-coverage-report
#          path: ./coverage
